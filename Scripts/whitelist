#!/usr/bin/python3.8

# In case you use very selective whitelisting in your gitignore file this script is for you.
# When you face the situation that you would like to whitelist another very nested "target file" in your gitignore file,
# it is often necessary to type multiple long lines if you do not wish to include all the files on your way to the "target file".
# Call this script and provide it with the specific path to the "target file" as its first parameter.
# All lines of the scripts output can now be added to your gitignore file or a selection of such.


from os import sep, _exit
from os.path import normpath
from sys import argv

name_stack = ""


def create_output_recursivly(path_list):
    elem_zero_exists = True
    elem_one_exists = True

    try:
        _ = path_list[0]
    except IndexError:
        elem_zero_exists = False

    try:
        _ = path_list[1]
    except IndexError:
        elem_one_exists = False

    if not elem_zero_exists:
        _exit(0)
    else:
        if not elem_one_exists:
            global name_stack
            print("!" + name_stack + "/" + path_list[0])
        else:
            name_stack = name_stack + "/" + path_list[0]
            print("!" + name_stack)
            print(name_stack + "/*")
            _, *rest_of_list = path_list
            create_output_recursivly(rest_of_list)


def main():

    # handle the situation where no parameter is given
    try:
        whitelist_elem = normpath(argv[1]).split(sep)
    except IndexError:
        print(
            "Execution failed - Please provide a path to a file you would like to whitelist")
        _exit(1)

    # filter empty strings
    whitelist_elem = list(filter(None, whitelist_elem))

    # create output
    create_output_recursivly(whitelist_elem)


if __name__ == '__main__':
    main()
